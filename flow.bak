#lang racket

(provide flow)
(provide flow?)
(provide flow-id)
(provide flow-add-option)
(provide flows-rem-duplicates)
(require "option.rkt")

;TDA flow

;---------------------Constructor---------------------

;flow: crea un flujo para un chatbot
;;;Dominio: id (int) X name (string) X *options
;;;Recorrido: flow
(define flow
  (lambda (id name . options)
    (if (and (integer? id)
             (string? name)
             (or (null? options) (andmap option? options)))
      (list id name (options-rem-duplicates options))
      (raise "Error al crear flow")
    )
  )
)

;---------------------Pertenencia---------------------

;flow?: Comprueba que los elementos de una lista dada cumplen con el formato del TDA flow
;Dom: list
;Rec: boolean
(define (flow? args)
  (if (and (>= (length args) 2)
           (integer? (flow-id args))
           (string? (flow-name args))
           (or (null? (flow-options args)) (andmap option? (flow-options args))))
      #t
      #f)
)

;---------------------Selectores---------------------

;flow-id: selecciona el código id del flujo
;Dominio: flow
;Recorrido: id (int)
(define flow-id car)

;flow-name: selecciona el nombre del flujo
;Dominio: flow
;Recorrido: name (string)
(define flow-name cadr)

;flow-options: selecciona el listado de opciones del flujo
;Dominio: flow
;Recorrido: lista de opciones (list)
(define flow-options (lambda (flow) (caddr flow)))

;---------------------Modificadores---------------------

;flow-add-option: añade una opción a un flujo ya existente.
;;;Dominio: flow X option
;;;Recorrido: flow
(define (flow-add-option flow . new-options)
  (let ([option-list (append (flow-options flow) new-options)]) 
        (list (flow-id flow) (flow-name flow) (options-rem-duplicates option-list))
  )
)

;---------------------Otras funciones---------------------

;flows-rem-duplicates: remueve flows duplicados de una lista de flows en base
;al id del flujo, dejando la primera aparición de la opción únicamente
;;;Dominio: flows (list)
;;;Recorrido: flows (list)
;Utiliza la función remove-duplicates, utilizando como criterio la igualdad de IDs de los flujos.
;*Misma lógica que función options-rem-duplicates*
(define (flows-rem-duplicates flows)
  (remove-duplicates flows
                     (lambda (x y) (equal? (flow-id x) (flow-id y) ))
  )
)